* Subclassing
 - fragile base class
   - ha una cura semplicissima
     (non chiamare pubblici overridabili da altri pubblici
     overridabili)
 - dynamic method lookup

si possono estendere le responsabilità per composizione, ma non arrivi
a subclassing sostituzione liskov.

fai un graphic circle che wrappa un circle ed espone l'interfaccia di
circle per /forwarding/, vale a dire per /delega cazzi tua/.

però abbiamo il problema della sostituibilità, non abbiamo
un'astrazione che permette di non distinguere circle da graphic circle
perchè il type checker si incazza.

altrimenti puoi estendere le responsabilità attraverso il /subclassing/,
graphic circle non è un wrapper per circle, è un'/estensione/ di
circle

#+begin_src java
  public class GraphicCircle extends Circle {
      Color outline;
      Color fill;
      public void draw(DrawWindow dw) {
	  dw.DrawCircle(x, y, r, outline, fill);
      }
  }

  public class Client {
      public void doodoo() {
	  GraphicCircle gc = new GraphicCircle();
	  double area = gc.area();
	  Circle c = gc;
      }
  }
#+end_src

Non esiste l'ereditarietà multipla visto che non siamo coglioni

Constuctor chaining
per girare il costruttore del graphic circle, ti conviene che abbia
girato il costruttore di circle, e per far girare il costruttore di
circle, ti conviene che abbia girato il costruttore di =Object=.

puoi fare =super= per invocare roba della classe sopra, sopra di /un
solo passo/ 

* Shadowing
#+begin_src java
  public class Circle {
      double x,y,r;
      /* roba */
  }

  public class GraphicCircle extends Circle {
      Color outline;
      Color fill;
      float r;
      public void draw(DrawWindow dw) {
	  dw.DrawCircle(x, y, r, outline, fill);
      }
  }
#+end_src

qui in =GraphicCircle= hai =this.r= e =super.r=, se ho =r= e basta
=super.r= se ne va a fanculo, è inombrato, /shadowed/[fn::blacked]
poi puoi fare "shadowing" di metodi ma quello è l'/overriding/.

* Dynamic method lookup
il runtime environment decide a runtime quale metodo invocare con il
/dynamic method lookup/, il binding è determinato dal tipo
dell'oggetto e non dal tipo della reference variable.

in linea di principio java fa tutto quello che si può fare in un
ambiente interpretato, con un fottio di JIT in mezzo.

ma i metodi che si possono invocare sono determinati staticamente dal
tipo della reference variable, quindi se ho =Circle c = new
GraphicCircle= io lo sto trattando come =Circle=, per quanto sotto sia
un =GraphicCircle= il programma deve trattarlo come =Circle= se la
reference variable è di tipo =Circle=.

la reference variabile definisce l'intefaccia che puoi usare
l'oggetto sotto definisce l'implementazoine.

se dichiari =final= allora il dynamic method lookup non devi farlo.
un metodo statico non può mai essere overridden, perchè altrimenti so'
cazzi.

/type erasure/, a volte il runtime environment per motivi di
performance si scorda che cazzo di tipo sto guardando.

* Cast
il cast serve a cambiare il tipo della reference variable, la
reference variable che determina per l'appunto l'interfaccia che può
essere chiamata da quella reference variabol.

* Super
 - non puoi fare =super.super=
 - super può essere usato nella classe che sta estendendo.

* Ontologia
stiamo vedendo il problema della classe fragile della lezione scorsa,
studimo l'esistenza di questo problema, la sua /ontologia/

 - Malfunzionamento: nello spazio funzionale la funzionalità del
   risultato è diversa dalla funzionalità della specifica
 - Difetto: la causa del malfunzionamento, resta a dormire pre un po'
   poi ci arriva il program counter.
   - che parti del codice vanno corrette per arrivare al funzionamento
     corretto?
     - a volte ho =x=1= invece di =x == 1=
     - a volte è localizzato su più linee di codice
     - a volte ho correzzioni diverse che vanno tutte bene, qual'è
       allora il difetto?
 - L'errore: sta nello spazio del progetto, sta nello spazio di
   - Hai dormito male
   - Non hai letto bene le specifiche
   - Chi ha scritto la classe base non ha visto che era una classe fragile.
 - L'essere è e non può non essere

allora soluzione?
 - nella classe base ho add set che usa add element
 - voi definite un altro metodo privato chiamato =_addElement()=
   privato
   poi se vuoi un =addElement= pubblico fai qualcosa con forwarding a
   =_addElement()=
 - ora il metodo =addSet= chiama quello privato che non è
   overrideabile, e non è fragile
   
* Interfaccie
** Classi astratte
L'esempio di =Shape= di prima, dichiaro =getArea()= astratto, lo
dichiaro, non lo definisco
#+begin_src java
  public abstract class Shape {
      public abstract double area();
      public abstract double circumference();
  }

  class Circle extends Shape {
      /* ora circle deve implementare area() e circumference() altrimenti
       ,* non riescie a concretizzarsi, restra astratta, e se non dici che
       ,* è astratta allora il compiler s'incazza */
  }
#+end_src

ora passiamo alle interfaccie, le interfaccie sono contratti puri

negli anni 80 era forte il concetto di /design by contract/ (vedi
eiffel, vedi /The Pragmatic Programmer/)
#+begin_src java
  public interface Drawable {
      public void setColor(Color c);
      public void setPosition(double x, double y);
      public void draw(DrawWindow dw);
  }
#+end_src

l'interfaccia emerge quando un qualche client ha bisogno di non dover
distinguere tra più oggetti, basta che il client sappia che qualsisasi
cosa abbia in mano, quella cosa /implementa quell'interfaccia/.
È l'emblema della /substitutability/

la classe astratta emerge quando ho qualcosa in comune tra più classi
che non ho bisogno di ripetere tra più classi simili
è più per /subclassing/.

può contenere membri statici vel final
costanti
magari l'interfaccia dei cerchi ha il pi greco

* Esempio elettorato

essere /upfron/, volersi mettere davanti e definire quello che vuoi ci
sia poi, sottovalutando il valore della pigrizia, del non fare quello
che poi non è detto che vada fatto.

diamante vuoto
 - no martini no party.
 - martini anche se no party.

diamante pieno
 - wrapper, bene o male
   wrapper se non avvolge qualcosa è un lenzuolo vuoto, collassa, non esiste.
 - metto in vita un rappresentate di studenti, questo ha bisogno di
   aver già composto un suo studente
 - quando metto in vita uno studente ho bisogno che questo abbia un libretto
 - metto in vita lo studente, poi passo lo studente come parametro
   quando faccio il rappresentante degli studenti.

* Mixin
a un certo punto ho una classe che la fai ereditare da una classe astratta
questa eredita da una classe astratta e implementa un'interface.

quelle operazioni ti conviene farle non oggi, ma domani, parti con la
cosa più semplice, non partire complicato.
ottimizzare prematuramente l'implementazione va male
ottimizzare prematuramente la struttura è un tumore, e cresce, e ti
arriva allo stomaco, e muori, male.

