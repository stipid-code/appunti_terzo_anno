#+begin_src java
  int x; //alloca intero x
  Circle c; //alloca reference a circle
#+end_src

La dichiarazione è essa stessa un'istruzoine[fn::(quella pubblicità
dell'attesa del piacere)]

#+begin_src java
  Circle c1 = new Circle(sto);
  Circle c2 = new Circle(cazzo);
  c1 = c2; //assegna la reference, non il cerchio riferito
#+end_src

* GARBAGE COLLECTOR
che succede al cerchio che ho mandato a fanculo?
funzionalmente ho perso ogni reference a quell'affare, ho perso il
controllo di quel coso come un cinese che perde il controllo di un
satellite, è perso nello spazio /and I'm floating in a most peculiar
way, and the stars look very different today/.

E la performance? Quel cerchio dimenticato resta in memoria, occupa
spazio di memoria, java include il gahrbaj collector, ora va
introdotto il concetto di /sameness/, come cazzo vedo se due oggetti
sono uguali? se faccio =circle1 == circle2= sto paragonando le
reference.

quindi ho il metodo =equals()= delle classi per vedere se sono uguali.

altrimenti posso vedere uguaglianza tramite uguaglianza in un qualche
database del caso, boh.

** Costruttore di default
Java ti autogenera un costruttore di default se non ne dichiari
nessuno

Che fa sto costruttore? Niente, ma deve comunque dichiarare il
costruttore della sua classe base, che deve chiamare il costruttore
della sua classe base, che...

La classe Adamo da cui nasce tutto è =Object=, un ctor che non fa un
cazzo chiamerà comunque il costruttore di =Object=, quindi java crea
sto costruttore che non fa un cazzo e chiama il ctor di =Object=

se hai un ctor con parametri un cazzo allora non c'è bisogno

se crei un ctor con un costruttore con void, ma crei un ctor con
parametri non void allora java dice "ok non vuole un ctor senza
parametri, con una signature void" e non te lo fa.

** Overloading
Overloading è che cosa? Sovraccaricare un nome di più significati

magari ho sovraccaricato il nome =Circle()= di avere 4 implementazioni
(ho 4 costruttori della classe =Circle=) e i metodi sono distinti
dalla signature del metodo, da che parametri ti passo.

Ma se mi servono due costruttori con la stessa signature.

I costruttori troppo intelligenti si fa meglio a non usarlo, se ho 747
costruttori con
 - nome e cognome
 - nome e cognome e matricola
 - nome e cognome e data di nascita
 - nome e no cognome e all of the above

ma il costruttore rende il tipo posso fare

#+begin_src java
  Tizio caio = new Tizio("Caio").setLastName("de Semproni").setNascita(new Data(01,01,1970));
#+end_src
costruttore telescopico.

Però ho oggetti che per poter essere messi in vita devo fare un bel
po' di roba tutta insieme, con parecchie cose insieme e se faccio un
coso alla volta ho stati in mezzo non consistenti, in tal caso un
costruttore deve creare da sè qualcosa di minimo che sta già in piedi.

Se faccio un wrapper e poi ho bisogno del setter per mettere /poi/ il
coso che wrappa allora prima di chiamare quel setter ho un wrapper che
collassa su se stesso.

L'Overloading si applica a un fottio di roba, posso fare overloading
anche

*** this.getNuts()
altrimetni, self auerenes, ho bisogno di this per usarlo come
"biglietto da visita", chiamo un metodo "fai qualcosa a (oggetto)" di
qualcuno e gli dico "oh stronzo! fammi sta cosa"
u
altrimenti =this()= invoca il costruttore con quei parametri

#+begin_src java
  public class Point {
      public Point(double x, double y) {
	  this.x = x;
	  this.y = y;
      }

      public Point(Point p) {
	  return this(p.x, p.y);
      }
  }
#+end_src

questo utilizzo del biglietto da vistia può essere usato per =CALLBACK=

** Close enough
rappresentare le cose quanto mi serve per la progettazione al momento

quando uso il +, il =public=, voglio che quel metodo possa essere
invocato da oggetti di tipo diverso.

=CALLBACK IDIOM=

Lo schema UML sottende un implementazione =CLOSE ENOUGH=

 - Idioma agganciato al linguaggio
 - Pattern agganciato a un cazzo, language agnostic
   - Molto più legato a come organizzo delle classi

Diamante/ martini
non puoi fare un subject se non hai un delegate
non puoi fare un party se non hai un martini

ma il party ha un ciclo di vita diverso dal martini
non esiste il party senza il martini, ma il martini esiste anche fuori
dal party

diamante vuoto

diamante pieno
il publisher nasce e muore con il suo state
il libretto e lo studente hanno lo stesso ciclo di vita
il tuo ciclo di vita è lo stesso del coso

diamante non implica freccia, il delegato non memorizza il subject, ma
ha un subject tra i parametri di qualche funzoine

** Costruttore di copia
ormai mi sono impanatanato e devo parlare dei costruttori di copia

è quello che riconosci perchè ha la forma

#+begin_src java
  public Circle(Circle c);
#+end_src

* UML object diagram something
quando sviluppi oltre alle classi ci sono gli oggetti, che sono due
punti di vista abbastanza diversi, con forme relazioni e pure
topologie diverse.

tu quando programmi usi le classi, anche se in vita ci sono gli
oggetti, pensa agli oggetti.

Oltre al class diagrama è interessante conoscere l'object diagram

il diamante nero \to deve essere visibile solo al suo wrapper, il
diamante nero = è *embedded*

uno per disciplina quando copia cose con reference e cosi embedded fa
una /deep copy/, copia il coso e copia anche il suo state.
se questa cosa diventa ciclica allora /cazzo/ e devi andare /mooolto/
attentamente.

** la copia difensiva
se ho un attributo privato io non ti do l'indirizzo di sto coso, non
ti do la reference a quell'affare, se mi chiedi =getState()= io ti di
una copia

tu al tizio che chiede =getState()= dai una copia

* Stringas et Immutabilitas
immutabile = tu lo crei, il costruttore fa quello che deve fare, da lì
in poi è costante
se vuoi una stringa mutabile usa uno =StringBuffer=

Una varabile locale il suo tempo di vita è quello del c

Java promuove un uso molto liberale di allocare a cazzo che tanto
esiste il garbage collector.
Il valore non è tanto l'efficienza quanto la manteniblilaggine e
chiarezza.
