* Intro
Tecniche con cui si ingegnerizza l'ingengeria del software
 - La magia nera con cui dai stime temporali che richiederanno 15 anni
   uomo o boh
 - Dimostrare che un sistema è corretto o performante
 - Range molto ampio di un sacco di roba

Fare un po' di tutto sarebbe anche utile se non fossimo mezze ceppe   

Qui saremo a fare il progetto di un progetto
Artefatti di progettazione
Parlare di boh in 10 minuti, fare boh in 1000 righe

** Un esempio, ad esempio
 - Delineare un problema
   il tema tratta di cosare catene di contaggio di boh
 - Diagrammino uml per descrivere che fa il programma
 - Descrizione delle azioni scritte li che fanno

/Java standard edition/
Differenza tra un programma e un applicazione
 - Applicazione : di solito una bella stronzatina web del cazzo che
   apri la tua applicazoine dimmerda attraverso il browser, non
   installata sulla tua macchina, che deve avere un database, una
   persistenza, per forza un database? *pefforza*

/oltre la standard edition/
/enterprise edition/
Quello che facciamo qui è scrivere un pezzo di un'architettura
Hai i package e i cazzage

DAO (Database Access Object, che cazzo ne so)
Deve succedere che chi scrive il Java non scrive l'SQL, e chi scrive
l'SQL non sia un maestro di Java

Gli piace molto l'architettura del software, scatoloni

** Il progetto delle classi
Prima di fare le classi col punto e virgola
 - Puoi parlarne ad alto livello, descrivere, rappresentare i boh in
   catene di contagio organizzando cluster che sembrano gruppi di
   whatsapp.
 - A partire da questo in base ai sintomi osservati ho fatto un test
   negativo e boh e voglio valutare la rischisità che aveva un
   soggetto, posso calcolare la rischiosità che aveva un tizio che ho
   visto in passato, posso calcolare la mia...

Il \textsc{Mapper} è un design pattern che riflette l'osservazoine
A chi va un po' di UML?
L'osservazione è un tipo e quel tipo è
 - Riporta un contatto
 - Riporta un sintomo
 - Riporta un test

Poi hai un time record
Poi hai i cluster   

Poi puoi discutere, puoi parlare di robe boh
aiuto non ci sto più capendo un cazzo che sta dicendo di cosa stiamo
parlando che aaaaaaaaaaaaaaaaaaaaa

Così posso parlare in alto livello di qualcosa
Posso capire che cazzo sta succedendo nel codice
Gestire codice complesso in modo professionale attraverso sticazzi

* Organizzazione corso
Come si arriva a questo obbiettivo
su moodle ci sono le slide
fa lo stesso
 1. Java basics and Idioms
    Non ci interessano troppo dettagli di sintassi e scazzi
    Ci interessa capire in che modo i construtti del linguaggio si
    usano in idiomi e poi in pattern per usare quel linguaggio in modo
    efficacie secondo constrtutti e pattern e cazzen

    Idioma \to pezzo del linguaggio che devi aver capito bene, grok
    boii.

    Il =this= di Java, se lo volessi fare da libro sarabbe il
    parametro per disambiguare...
    Sticazzi serve per passarti il mio indirizzo per fare una
    /callback/
    I basics sono che esiste il this
    Gli idioms sono che usi il this per fare il /callback/

 2. UML
    l'UML è molto usato, il prof ha una polemica personale contro chi
    pensa che sia inutile

    Lo introdurrà un po' a schiaffi

 3. Scalare dagli idiomi ai design patter
    Un idioma del C ad esempio è passare il puntatore perchè fanculo
    le reference
    Un idioma del Java è passare una reference per fare la callback o
    boh

    I design pattern sono cose più complesse, anche più agnostico per
    il linguaggio.
    I design pattern

    [piccola interruzione]

    I design pattern sono una palestra sul quale allenarsi un piccolo
    livello di design di sticazzi che ne so.
    In palestra non si palleggia non so che dirti

    I design pattern sono soprattutto degli esercizi

    Se impari a fare design pattern impari a progettare software e a
    usare Java a modo, codice scritto bene è comunque pieno di
    pattern. Ti permettono comunque di avere pezzi di design abbasta
    grandi in modo immediato
    "Eh dai cazzo usa un Observer"
    Usano un linguaggio che funziona

    Il rischio è finire a fare boxology
    Quando disegni qualcosa in UML devi avere un'idea di implementarla
    Te mentre fai il progetto devi sapere che è aderente a che te fai
    e che te puoi fare, ed è molto importante evitare il rischio di
    boxology

 4. Testing
    JUnit

 5. Object oriented analisys
    Use case diagram
    Trasformare cosi di testo in diagrammi o cosi testo \leftrightarrow diagrammi
    a^10
    devo torturare qualcuno per farmi dire che cazzo deve fare questa
    cosa, che funzionalità deve offrire

 6. Software development lifecycle
    Anche qui ha dei sassolini nelle scarpe
    Faccio sviluppo agile e non ho mai programmato

    "Come organizzi il progetto di sviluppo"

    E poi ci sono modelli più raffinati, quali artefatti produci, come
    li modifichi, come gestisci i diversi passaggi, ci sono 3 o 4
    modelli e devi conoscerli tutti

    hanno a che fare con come si combina l'agilità con la disciplina
    aglilità è per fare in fretta
    disciplina è per farle bene bene

    Non possiamo fare sviluppo agile se dobbiamo creare straprecisone
    per un accelleratore di particelle

    Se devo fare una webapp che tra 3 mesi che sia fattibile, tra 3
    mesi non farà un cazzo, qui devo fare agile, devo fare in fretta.

    Applicazoini importantissime vanno fatte con disciplina, con
    precisione, piano e vai lontano.

    Applicazioni da fare in fretta le fai con uno sviluppo agile,
    bello in fretta

* Stagista del caso
Ci sarà un tizio che fa ora il dottorato su architettura et al et cazz

* Esame
Esamination Mithod end deyts
Exams in the far past, a long long time ago, in a galaxy far away
Esami *RECENTIII*

L'esame è un'elaborato autoassegnato

** Caratteristiche dell'autoassegnato
Bisogna recuperare la capacità di focalizzarsi cui cazzo di dettagli
Voi vi fate una domanda e vi date una risposta

In modo
 1. io combino, faccio un esercizio di microprogettazione mettendo
    insieme qualche design pattern del caso
    Il tuo problema è fare il progetto.
    Avere lo scopo di raggiungere produttività, sei in grado di creare
    i tuoi strumenti.
    Chi non ci sta capendo un cazzo magari si ferma qui, chi ci sta
    capendo un cazzo è un peccato

 2. Livello standard, Tu qui definsci uno statemt
    analisi dei prerequisiti, sviluppo, testing (con JUnit).
    Ti permette di consolidare di più.
    Occasione di ragionare di come UML descrivere prerequisiti e
    passare al codice con punti e virgole.

 3. Livello avanzato, può progredire a una tesi di laurea.
    Oltre ad andare solo a roba sulla progettazione software ci metti
    anche roba di /advanced computing/ tipo modellare probabilità del
    caso.
    Il modo con cui il progetto si integra nel loro progetto è
    attraverso un API che ti permette di far partire stocazzo di
    cazzo.

    /Model driven engineering/, il modello è un prodotto del tuo
    sviluppo, o crei del codice a partire dal modello o crei il
    modello con del codice.

*** Lo faccio da solo o lo faccio in gruppo
Meglio lavorare in gruppo

anche altre complicazioni

non esiste scrivere software da solo nel 2022, è da disgraziati,
diventa fondamentale condividere i processi, condividere pratiche.
Non si condivide volentieri il codice.

Il gruppo quanti?
 - 2? Va bene
 - 3? Va bene? Forse richiede uno Pseudo-governo
 - 4? Eh...
 - 4+? Ti prego fermati

La modalità 2 3 falla in un dominio che conosci.

* Ci sono testi?
A volte sono menzionate nelle slide, bastano le slide ma possono
essere usati per chiarimenti

Se non capisci devi almeno arrivare a capire cosa non hai capito
fai delle domande decenti o ti bullizzano su stackoverflow

Va usato Java, il corso fa tutto in Java, l'esame si fa in Java

* Usare webex quest'anno è come avere la sindrome di Stoccolma
** Condcordo pienamente
Ci interessa focalizzarci su quali parti del linguaggio sono utili per
realizzare idiomi che

 - Object based
   senza inheritance
 - Object cringe
   con inheritance
   et al.

Avere i sottotipi è una rottura di cazzo

* Java roadmap
** Inizio, The phantom blood
 - Primitive, reference, tipi, variabili
 - Reference type definition, dichiarazione, costruzione oggetti, fare
   riferimenti a oggetti, Array, Stringa
 - Garbage Collection
 - Variabili e metodi di classi

** Vendita dell'anima all'Enterprise, Battle tendecies
Un oggetto è qualcosa che ha uno stato (variabili) e un comportamento
(metodi)
Un tipo identifica delle operazioni
Ogni tipo ha delle operazioni che si applicano a esso
La somma è diversa per int, unisgned int, float, double, ptr...

Quello che da a un oggetto la sua identità è lo stare in parti diverse
della memoria
Una classe è un tipo di oggetto, il tipo cerchio è un tipo di oggetto,
è una classe.
un file handle è un tipo di oggetto, è una classe.

Java enfatizza molto più del c la differenza tra tipi builtin e tipi
definiti.

In C come te tratti un int e come te tratti uno struct è uguale
In Java i tipi builtin sono trattati by type
I tipi builtin sono trattati da reference, i tipi primitivi sono
rappresentati in modo immediato, quegli altri sono rappresentati per
riferimento.

Parla in modo anche astratto, comunica quanto necessario, non scendere
troppo nei dettagli che la gente si perde.

Quando dichiaro
#+begin_src java
  Circle c;
#+end_src
questo non crea un oggetto, questo crea un riferimento a oggetto
=Circle=
quando faccio
#+begin_src java
  Circle c = new Circle();
#+end_src
questo crea un oggetto =Circle= nello heap, =new Circle= restituisce
una reference all'oggetto e l'=== e la assegna a =c=

*** Il resto della sua anima, signorina
Le varaibili in C sono una locazione di memoria a cui associ un tipo
che resta quello, quello che da identità alla variabile in C è solo la
locazoine in memoria, puoi referenziare una locazione int e gestirla
come se fosse un float. Oggi purtroppo il software è arrivato a
livelli di astrazione che non permettono cose del genere.

In java gli oggetti sono dall'altra parte del mondo, hai le reference,
puoi andare solo per reference.

Le reference contengono riferimenti (puntatori per perdenti) a oggetti

* Idiomi
I puntatori stanno in un livello alto
il putnatore controlla quali variabili saranno usate nella prossima
esecuzione di stocazzo.

L'idioma fondamentale nel C è che i puntatori stanno a fare gli dei
sull'olimpo a giocare a scacchi tetradimensionali con le povere
variablili flatlander del cazzo Salti su e giù tra l'olimpo e le
flatland.

L'idioma del Java è che tu nell'olimpo non ci vai, tu chiedi accesso
all'olimpo dal runtime e quello ti da una chiave di bronzo ossidato
perchè quelle d'oro e d'argento ce le ha già san Pietro.

** Altra vendita dell'anima all'enterprise
Il java obbliga scelte di stile così tu stronzetto programmatore
smetti di farti problemi di stile e fai qualcosa di utile.

 - Nomi delle classi *MAIUSCOLE*
 - Nomi di funzioni e variabili *minuscole* in *lowerCamelCase*
   
Se vuoi passare un intero per reference devi modificarla passandogli
un qualche oggetto, la metti in un tipo boxed.
=Integher=

** Major in concept, Minor in impact
I tipi builtin sono trattati solo per tipo, non per riferimento
Ma puoi passarli per riferimento con un =boxedBullshitWrapper=

** User defined type
#+begin_src java
  public class Circle {
      public double x,y;
      public double r;
      public double getRadius() { //Definizione
          return r; //Implementazione
      }
      public double getCircumference() {
          return r*2*Math.PI;
      }
      public double getArea() {
          return r*r*Math.PI;
      }
      public static void main(String args[]) {
          System.out.println("Mi piace lamentarmi");
      }
  }
  //[...]
  int x; //hai in vita un intero
  Circle c;
  //hai in vita solo un riferimento in cui mettere un Circle
  //hai solo un puntatore a Circle
  c= new Circle();
  //adesso hai fatto una malloc
#+end_src

poi c'hai
#+begin_src java
  public class Circle {
      double x,y;
      double r;

      public Circle(double x, double y, double r) {
          this.x = x;
          this.y = y;
          this.r = r;
      }
  }

  //[...]
  //in qualche oggetto cliente
  Circle c = new Circle(1.414, -1.0, .25);
  //idem se fai
  Circle c;
  c = new Circle(1.414, -1.0, .25);
  //hai un lvalue e un rvalue
  //che sono il coso alla destra e a sinistra dell'uguale
  c.x;
  c.y;
  c.r;
  //un po' come il punto del c, ma qui lo stai usando sul riferimento, non sul puntatore dereferenziato
  k = c; //lo stesso cazzo di cerchio, non una copia, stessa posizione, stai copiando il puntatore, indirizza allo stesso cerchio
#+end_src
