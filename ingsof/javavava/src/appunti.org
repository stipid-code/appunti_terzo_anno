wow sta parlando di cose del java
mi interessa molto
quando arriva che muoio, grazie?
porcodio

* subtyping
la spinta forte è la sostituibilità
liskov liskov liskov liskov liskov liskov liskov liskov...

il vantaggio della sosotituibilità è che il client ha un'interfaccia
bellina bellina semplicina in funzione della classe basina che viene
molto molto implementatina da altre sottoclassine ine.

faccio una lista di shapes, le shapes si gestiranno da sole come cazzo
sono implementate

il vantaggio è che poteva andare direttamente a usarmi python

il bisogno del client rende utile l'astrazione del

ho fatto un cerchio, ho fatto un rettangolo
faccio un supertipo se so che prima o poi ci sarà qualcuno o qualcosa
che trae vantaggio dal non distinguere cerchi e rettangoli.

non fare una tassonomia linneica di classi, non è detto che ti serva.
Quando faccio comparire classi basi comuni quando so che conviene
poterli non distinguere (bottom up)

Quando faccio top-down allora metto i sottotipi se so che mi servirà
poter distinguere sottotipo professore da sottotipo tecnico quando
parlo di dipendenti.

* Mixin
a differenza del C++, qui siamo sani di mente e *non* abbiamo
l'eredità multipla, un minimo con le interfacce, ma boh.

 1. la gerarchia è un albero
 2. per fare l'albero ci vuole il seme
 3. per fare il seme ci vuole il frutto
 4. per fare il frutto ci vuole un fiore
 5. per fare tutto ci vuole un fiore

overload = usare stesso nome per più cose
override = ridefinire la costituzione [fn::riducendo il numero di
parlamentari]

** Principio di sostituzione di LISKOV
tutto [fn::fuck yeah!] quello che fa la superclasse deve poterlo fare
la sottoclasse, con le stesse precondition e postcondition.

Un insieme di Float è un subtipo di un insieme di numeri? No.
in un insieme di Numeri posso aggiugnere un Integer.
in un insieme di Float non posso aggiiungere un Integer.
quindi Liskov si incazza, quindi non è un sottotipo, quindi
vaffanculo.

* Dipendenza
chi dipende da chi? Una buona progettazione software, così come un
buon rapporto con la cocaina, deve ridurre al minimo le dipendenze, e
dargli un ordine decente.

fragile base class, vale a dire che la classe base dipende dalle
classi che la ereditano.

poi composition vs. inheritance, tirate fuori le bibbie che è ora di
fare i domenicani.

quando il tipo derivato ha qualche operazione che non puoi sapere se
non sai quale razza di tipo sia.

ho una shape, voglio il perimetro e l'area, perimetro e area devo
sapere che /sottoclasse/ di shape, vale a dire che razza di forma mi
ritrovo.
qualcosa si può realizzare solo sapendo che specializzazione di shape
mi ritrovo, ma anche qui stai /acquisendo debito tecnico/.
usalo se /ne hai davvero, davvero, davvero bisogno/.

* Da grandi progettazioni derivano grandi responsabilità
Le responsabilità di una classe sono cose
spesso ci si ritrova a dover estendere le responsabilità di una certa
classe, sono le responsabilità che sono allocate a quella classe,
assegnate a quella classe.
queste possono anche farsi sapendo a chi delegare sta cosa perchè non
sono cazzi mia.

mettiamo che ho fatto Circle, ora voglio fare GraphicCircle, che ha
tutte le responsabilità del circle, ma ha anche le responsabilità di
/disegnare il cazzo di cerchio/.

** GraphicCircle pt.2
il concetto del wrapper è che il wrapper è un adapter
il concetto dell'adapter è che l'adapter è un wrapper
il concetto di entrambi è che cambiano l'interfaccia di un altro
oggetto contenuto lì visto che mi fa comodo un'altra interfaccia in
questo contesto

Implementare per /forwarding/ \leftrightarrow Implementare per /cazzi
dell'"avvolto" dal wrapper/

Arriverà il giorno in cui staremo a programmare qualcosa qui, arriverà
il giorno, ma non so quando, perhcè quel giorno non è ancora stato
allocato, ho solo una reference a quel giorno.

[...] parla di cose

La composizione bla bla bla principio di sostituibilità di Liskov, ma
sticazzi.

** Drawback del subclassing
la fragile base class è un anti-pattern (o anti-idioma, detta del
vicario) che accade quando la classe base finisce col dipendere dalle
classi figlie che la ereditano, è quindi un antipattern perchè viola
la sacra poszione del genitore nella famiglia.

** Come si seleziona quale implementazione viene eseguita a rutime?
 1. L'implementazoine si sceglie in base al tipo dell'oggetto e non in
    base al tipo della reference variable (grazialcazzo)
 2. Se hai roba virtuale si sceglie la prima implementazione trovata
    risalendo la gerarchia

* Classi base fragili
prendiamo il seguente codice client
#+begin_src java

  class Client {
      public static void main(String args[]) {
	  Set set1
	      = new Set().addElement("Pippo").addElement("Pluto");
	  Set set2
	      = new CounterSet().addElement("Global").addElement("Offensive");

	  set2.addSet(set1);
	  System.out.println("Puttana la " + set2.getSize());
	  // stampa 6
	  //perchè abbiamo incrementato il contatore 2 volte a elemento
      }

      public static void secondary(String args[]) {
	  /* in un mondo dove
	   ,* Class A
	   ,* Class B extends A
	   ,* Class C extends B
	   ,* Class D extends C
	   ,* A.op() {return 1;}
	   ,* C.op() {return 2;}
	   ,*/
	  A a = new A();
	  A b = new B();
	  A c = new C();
	  A d = new D();

	  a.op(); // => restituisce 1
	  b.op(); // => restituisce 1
	  c.op(); // => restituisce 2
	  d.op(); // => restituisce 2
      }
  }
#+end_src

prendiamo la riga di codice in cui dichiariamo set2 e facciamo gli =addElement()=
#+begin_src java
  Set set2 = new CounterSet().addElement("Global").addElement("Offensive");
#+end_src

=set2= è un =CounterSet= e invochiamio =addSet()=, rivediamo
l'=addSet()= delle due classi

Set
#+begin_src java
  public Set addSet(Set set) {
      for(Element element: violateEncapsulation(set)) {
	  this.addElement(element);
      }
      return this; //nuts
  }
#+end_src

CounterSet
#+begin_src java
  @Override
  public Set addSet(Set set) {
      super.addSet(set);
      size += s.getSize();
      return this;
  }
#+end_src

e ricorda che =super= esegue in classe base, =super= esegue quindi il
metodo della classe base =Set.addSet()=, che riutilizza =addElement()=

=addElement()= usa il =this=, e quel =this= esegue l'addElement di
=this=, che è un =CounterSet=, quindi dopo aver fatto tutti i
=CounterSet.addElement()= avrò già incrementato il contatore. ma
=CounterSet.addSet()= poi reincrementa di nuovo =size=.

L'errore fondamentale è aver esposto un metodo pubblico che usa un
altro metodo pubblico, quindi posso farne l'override, allora chiamerò
il metodo pubblico overridden e /te lo prendi n'icculo/.

Se fai un metodo pubblico che dipende da un altro metodo pubblico che
può essere overridden, salgo sull'auto sapendo che uso pneumatici di
quel tipo ma possono cambiarmeli, freno male all'incrocio e tiro 30
metri di sgommata che mi costa 13 punti della patente e la vita di una
famiglia di 4.

Un metodo pubblico che usa un altro metodo pubblico crea una classe il
cui funzionamento dipende da come viene estesa, da come viene
overridden, ne esci quindi con una classe base fragile.
