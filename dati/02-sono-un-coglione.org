* Vincoli
 - Intrarelazionali
   - Dominio
   - N-upla
   - Chiave
 - Interrelazioni
   - Integrità referenziale (niente null pointer, \pm)
     Mette in relazione righe di una tabella con righe di un'altra
     tabella

     
* Operazioni su tabella
 - Ricerca
   - Estrarre l'elenco deglio studenti che hanno preso almeno un 30
   - Non è a rischio di violare i vincoli visto che non aggiorna lo stato
 - Aggiornamento
   - Inserire l'n-esimo 30 di Ivan
   - Togliere il 16 che aveva verbalizzato la Conti (stronza)
   - Può violare qualche vincolo visto che modifica lo stato

** Violazione vincoli 
- Quali e come finisco con violare vincoli
- Come reagire

*** Scrittura
 - Posso violare dominio (metto 34 come voto)
 - Posso violare n-upla (27 e lode)
 - Posso violare vincolo di chiave (metto uno studente con una
   matricola già esistente)
 - Posso violare vincolo chiave primaria
   - Violando vincolo di chiave
   - Mettendo una chiave primara nulla
 - Integrità referenziale
   - Inserendo nella tabella interna qualcosa che non è una chiave
     primaria nella tabella esterna
   - Questo voto l'ha preso la matricola =nullptr=
   - Questo voto l'ha preso la matricola 00000000

*** Cancellazione
 - Integrità referenziale
   - Tolgo una riga dalla tabella esterna e sfilo una delle chiavi
     primarie che erano usate dalla tabella interna
   - Questo voto l'ha preso la matricola 12345678
   - Hanno fatto la /damnatio memoriae/ della matricola 12345678

*** Modifica
 - Tutti i precedenti
 - *TUTTI*
   - dominio
   - n-upla
   - chiave
   - chiave primaria
   - integrità referenziale
     - sulla tabella interna
     - sulla tabella esterna
     - di qua
     - di la
     - su
     - giu
     - *FIGARO*

*** E mo' che faccio?
Ho chiesto di fare un'operazione che violerebbe dei vincoli, il dbms
può fare i seguenti
 1. Mandarti a fare in culo e nono eseguire l'istruzione
 2. Con delle linee guida date alla creazione del database
    - prova a fare l'operazione in modo da non scazzare agendo sulla
      tabella esterna, è possibile istruire il dbms ad attuare 3
      diversi tipi di compensazione aggiustando in maniera automatica,
      ma preprogrammata alla creazione.
      - Rifuto
      - Eliminazione in cascata
      - Introduzione di valori nulli

**** Eliminazione in cascata	
Stile grande fratello, tutto quello che non doverbbe esistere, e che
diventa inconsistente senza l'esistenza della riga elimiata, viene
\textsc{[NEUTRALIZZATO]}, a cascata fino al raggingimento di una
consistenza interna

**** Introduzoine di valori nulli
I valori inconsistenti vengono \textsc{[REDATTI]} e impostati a =NULL=


*** Esercizio impiegati
#+begin_src c
  typedef struct {
      char* codice_fiscale;
      char* nome;
      char* cognome;
      int data_di_nascita;
      filiale* filiali:
  } impiegato;

  typedef struct {
      long codice;
      char* nome_sede;
      impegato* direttore;
  } filiale;

  /* ogli filiale ha un solo direttore
   ,* un direttore può lavorare presso più filiali
   ,* un impegato può lavorare presso più filiali*/
#+end_src

 - Chi è il direttore di una filiale ? In ogni riga della filiale
   definisco una colonna con la chiave primaria del direttore
   (in questo caso il codice fiscale)
 - Dove lavore un certo impegato? Un impiegao può lavorare presso più filiali
   se un impiegato potesse lavorare presso una sola filiale,
   aggiungerei alla tabella impiegato un attributo filiale, e lì
   scriverei il codice della filiale dove lavora.

   Ma un impiegato può lavorare presso più filiali, cazzo fo?

   (faccio una cazzo di tabella a lato che rappresenta gli archi del
   grafo =impiegato= \to lavora nella filiale \to =filiale=)

   tutto bello figo chiave primaria figo bello, (codice fiscale \to
   lavora \to codice della filiale)

   "Ovviamente", ci sta un bel vincolo di integrità referenziale visto
   che stiamo usando chiavi, primare, addirittura.
   
Se ogni impiegato fosse associato a una sola filiale allora potrei
solo mettere "dove lavora?" nella riga che definisce un impiegato
nella base dati.

* Linguaggi per basi di dati
/consigliato leggere ascoltando "lacrimosa" dal requiem di Mozart/

 - Operazione sullo schema
   - DDL: Data definition language
     - Creazione tabelle, modifica attributi delle tabelle
     - Specifica dei vincoli di integrità
 - Operazioni sui dati
   - DML: Data manipulation languate
     - alius
     - alia
     - aliud

Linguaggi
 - Procedurali
   specifica cosa fare, passo passo.
   Stile Java o C o C++ o Python o
   Brainfuck/ Cow/ Brainfuck but every + is the entrire bee movie script
 - Dichiarativi
   specifica il risutlato dell'operazione, capire come farlo so' cazzi
   tua.
   Stile haskell o lisp(se sei pazzo) o apl(da manicomio)

L'algebra relazionale è un linguaggio procedurale
Il calcolo realzione è un linguaggio teorico dichiarativo

L'SQL è un po' un ibrido, ha costrutti da lingaggio dichiarativo ma in
realtà è uno sporco linguaggio procedurale

QBE, query by example, dichiarativo, A\lambda onzo Church approved

* Algebra relazionale
/ora passa al "dies irae"/
Costituito da un insieme di operatori definiti su relazioni e che
producono diocane

 - Operatori iniemistici (tanto sti affari sono insiemi sotto sotto)
 - Ridenominazione, operazioni monadici (Haskell approved),quindi
   single input, single output (Dijkstra approved).
 - join naturale, prodotto chartesiano, theta join.
   Molto importatnti
   *MOLTO*

** Operatori insiemistici
differenza dai generici per la presenza di schema
vincolo, posso fare solo relazioni definite sugli stessi attributi
posso fare operazioni solo se queste operazioni sono definite sugli
stessi attributi.

*** Unione
unione tra due realzioni è una relazoine che ha tutte le tuple
appartenenti a una o l'altra relazoine
visto che non possono esistere tuple duplicate, le tuple che esistono
in entrambe le relazioni compariranno una sola volta nell'unione

**** Grado?
Grado di $A \union B$? il massimo grado tra A e B
(con grado si intende la lunghezza delle righe).
**** Cardinalità?
Tu mamma

*** Intersezione
Relazione con tutte le tuple che appartengono /non solum/ a R_1 /sed
etiam/ ad R_2.

**** Grado?
Inalterato
**** Cardinalità?
Caso "fortunato" cardinalità minima tra le due tabelle
Caso "sfortunato" 0

*** Differenza
Intersezione e unione sono commutative, la differenza *non è
commutativa*

tutte le tuple di R_1 che *non appartengono* a R_2

**** Grado?
Inalterato
**** Cardinalità?
Caso "fortunato" cardinalità invairata del coso a cui sottraggo
Caso "sfortunato" 0


** Operatori insiemistici e schemi
Oh no! gli schemi sono diversi! Dobbiamo rinominare la roba.

*** Operatore di ridenominazoine
operatore /monadico/
rinomina i nomi degli attributi, cambia i nomi delle colonne.

_*NON*_ volgiamo avere attributi con nomi uguali, i nomi delle colonne
devono essere *UNICI*.

quindi rinomina le colonne \to colonne con gli stessi nomi \to posso fare
l'unioine \to amen.

** Operatori di selezione

Operatore monadico, single input, single output, monoid in the space
of endofunctors.

Condizione di selezione è una formula proposizionale in cui compaiono,
combinati con gli operatori logici *AND*, *OR*, e *NOT* operatori di
confronto tra attributi e attributi o tra attributi e costanti.
 - stipendio > 10
 - voto < 18
 - stipendio > 10 *AND* voto < 18
 - data di nascita < data di reclutamento


sintassi:
\[ SEL_{condizione} (tabella)\]
esempio
\[SEL_{stipendio > 50 *AND* lavora a Milano} (Impiegati)\]

**** Grado?
invariato
**** Cardinalità?
quante righe ho selezionato

*** Selezione con valori nulli
La selezione con valori nulli, qualsiasi operatore di confronto con
quel valore è pari *stocazzo* (falso)
ovvio, ma adesso persone con età > 50 \union persone con età < 50 \ne
persone

Oltre a condizioni di confronto abbiamo anche
 - *IS NULL*
 - *IS NOT NULL*

** Operatore di Proiezione
operatore /ortogonale/ a quello di selezione è quello che invece di
selezionare righe /selezoina colonne/.

Genera una nuova tabella in cui invece di avere tutte le colonne ho
solo quelle tot colonne, si indica come
\[PROJ_{valori}(R) = {t[valore] | t \in R}\]

| Persona   | Professione | Età |
|-----------+-------------+-----|
| tua madre | puttana     | \infty   |
| sto       | cazzo       | 42  |
| Youssef   | kebabbaro   | NA  |

Proeitta su Persona e lavoro

| Persona   | Professione |
|-----------+-------------|
| tua madre | puttana     |
| sto       | cazzo       |
| Youssef   | kebabbaro   |

**** Grado?
Quanti valori ho selezionato
**** Cardinalità?
Se l'insieme su cui proietto *non è una superchiave* allora le righe
duplicate verranno /rimosse/ e potrebbe impattere sulla cardinalità

anche se non è una superchiave magari ho culo e non mi ritrovo con
righe duplicate

idem di sopra caso fortunato tutte le righe
caso sfortunato erano tutte duplicate e mi resta solo una riga (se
c'erano righe)

nell'algebra relazoine l'ordine è importante. L'ordine delle
operazioni, perchè è un linguaggio procedurale del cazzo per deboli
dove le operazoini hanno /effetti collaterali/.
Quindi l'ordine non è sempre commutabile, a volte lo è, a volte non lo
è, a volte sei una testa di cazzo.
