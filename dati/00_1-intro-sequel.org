Nella prima metà di ottobre (probabile) verrà fatto dall'universià un coso per
presentare il piano di studii
Di solito i piani di studii sono cambiati nel mese di novembre

* Basi di dati : Motivazione
Sono impiegati in un sacco di contesti
sui 40 anni fa erano più che altro usate per gestire cose gestionali,
dati gestionali
L'utilizzo di questi studenti si è esteso a contesti bancarii, tenere
conti correnti et al, con una certa complessità legate al fatto che
molte operazioni bancarie devono essere gestite con cura, ma tanta
cura.

Quell'operazione va a buon fine o non va a buon fine.
Se va a buon fine io ho meno soldi, lui ha più soldi
Se non va a buon fine non deve succedere niente
Non devono succedere scenarii ibridi, non esistono le mezze transazioni

** La grande distribuzione (esselunga)
T'ha capito

** Linee aeree
T'ha capito

** Le Persistenze
Altrimenti faccio un programma su un computer che deve pigliare dati,
spengo il computer, dove vanno i dati?
Le basi di dati vengono usate anche per dare persistenza (mettere su
un disco) gli oggetti computazoinali e dati acquisiti da un programma,
in modo che dopo spento, dopo riacceso, quella base di dati può essere
interrogata per riacquisire le informazioni inserite.

** Le web au chocolat
Pagine web e social network, sono stati motivi di evoluzione delle
basi di dati, vale a dire che le informazioni su un database di
facebook sono strutturati col cazzo rispetto al database di una banca,
devo metterci foto, video, mappe, like, dislike, commenti, post, gif,
ogni tipo di file mai fatto dall'uomo, foto di tua madre...

Qui hai database non SQL, database di nuova concezione, SQL è
strutturato (la S sta per structured), facebook non lo è

** Alter, altra, altrum
L'azienda contiene un sistema informativo, un sistema che tiene
traccia delle informazioni di cui ha bisogno l'azienda per funzionare,
questo contiene un sistema informatico che contiene un database per
contenere le informazioni in questione.

** Dato \to Informazioni
Criterii per trasformare dati in informazoine possono essere
uno scanf
il : separa dati diversi
il primo dato ha un numero di serie
il secondo dato ha un nome
il terzo dato ha una quantità in magazzino
il querto dato ha un costo per comprarlo

dato un criterio del genere mi farei un database tranquillo anche con
un programmino fatto in casa, magari in C, boh.

POSSIBLI CRITICITÀ

 - Devo intervenire sul codice per aggiornare la struttura del
   database, se voglio aggiungere una colonna alla tabella devo
   riscrivere il parser.
 - Lavorare con codice altrui, il codice altrui va a cazzi e smazzi e
   pugnali negli zebedei a meno di standard più restrittivi su
   sticazzo di dati
 - Due operatori vogliono scrivere in parallelo, e devo implementare
   dei cazzo di mutex adesso
 - Devo prevedere che tipi di enti diversi possono fare cose diverse,
   il magazziniere non può aggiornare il costo del televisore
 - Un bel giorno salta la corrente, all unsaved progress will be lost,
   ora devo implementare pure il recovery delle modifiche non scritte
   sul disco.
 - Se un file è enorme scrivere su quel file rallenta in fretta, ho
   bisogno di un modo efficiente per indicizzare quel file.

Visto che queste complessità sono comuni a tutti gli affari che devono
tenersi un sacco di dati, si fanno primitive standardizzate e hai un
DBMS (DataBase Management System) che gestisce tutti i puttanai del
correggere le correzioni in questione.

Verso l'archivio il DMBS si occupa di gestire tutte le questioni di
ripristino e indicizzazione e accesso concorrente e tua madre
deficiente e quanto e divertente.

Un database a questo punto altro non è che un sistema di dati gestito
attraverso un DBMS che offre un'intefaccia decente a noi plebei
mr.race condition

Se vuoi essere tecnicoso il DMBS e il database sono due cose diverse
Su un dbms può essere quindi caricato un database

* Cosa mi aspetto da un dbms
 - Gestire grandi collezioni di dati (big data, se vuoi far finta di
   essere figo)
 - Persistenti, che altrimenti facevo direttamente una cazzo di
   =std::unordered_map=
 - Garantire affidabilità, funziona anche in situazioni scazzate che
   parte la corrente e arriva il 1337 h4x0r
 - Privatezza, tu non sei un responsabile, tu non mi aggiorni i costi
   delle tv
 - Condivisione da parte di attività diverse
 - Efficienza, che altrimenti sticazzi.

il problema degli archivi separati è che o sono due attività del tutto
separate, o se vi è una qualche comunanza tra le due attività tu
arrivi al desync del cazzo quando un accesso o modifica al primo di
quest'affare non la fai coincidere con una modifica sul secondo
affare.
E se devi sforzarti così tanto a sincronizzarli fai direttamente un
solo archivio, testa di cazzo.

Posso avere utenti diversi con privilegi diversi di lettura e
scrittura, gruppi diversi di utenti, e sticazzi.

** Efficienza di dbms
Astrazione
** Modello dei dati
ci sono due tipi di modelli
 - Modelli logici :
   Tipi di modelli attraverso i quali tu dici
   "Voglio la matricola di uno studente"
   Astrae la rappresentazione del coso nel disco
 - Modelli concettuali :
   Servono invece per progettare una base di dati

il modello logico che useremo qui sono i /modelli relazionali/ nei
quali i dati sono rappresentati in /tabelle/

| semantica       | che            | consente    | di            | trasformare | il       | dato | in | informazoine |
|-----------------+----------------+-------------+---------------+-------------+----------+------+----+--------------|
| Dato vero       | e propio       | all'interno | della tabella |             |          |      |    |              |
| E questi affari |                | sono come   |               | associ      | sta roba |      |    |              |
|                 | in un database | relazionale | credo         | boh         |          |      |    |              |

Hai i nomi delle colonne e i nomi della tabella
lo schema logico è l'intestazione della tabella
Nomi di tabelle e nomi di colonne di quelle tabelle
Lo schema di intestazione è la parte della tabella quella in cima

*** Schema fisico, schema interno
Quelle tabelle con quei nomi con sta roba con boh
Come cazzo li rappresento? Lo schema e l'istanza come li rappresento a
livello fisico? Questo è gestito dallo schema interno

Schema esterno
Vedo alla mediaworld un apple watch perchè sono stupido
Ho una vista da cliente in cui posso vedere quanto mi costa, ma non so
quanto è ccostato a medaworld comprarlo

Non è che tutti i dati sono visibili a tutti gli utenti della base
dati
Ho uno schema esterno, che organizza viste diverse
dei miei dati a utenti con privilegi diversi, e non è dato che io
voglia esporre tutti questi dati a tutte le applicazioni che usano
questi database.

*** Indipendenza fisica e logica dei dati
indipendenza fisica
La rappresentazoine a livello logico resta inalterata anche se cambio
parto con un archivio molto compatto per cui non devo organizzare i
file in modo particolare, posso mapparle su un disco, posso mapparle
su un disco a cui accedo sequenziale

ora il mio database cresce, ho una tabella enorme, la riorganizzo come
una struttura ad albero, cambio la struttura a livello fisico, ma a
livello logico io vedo sempre una tabella.

la rappresentazione a livello logico non cambia quando cambio la
rappresentazoine fisica

indipendenza logica
posso tenere la stessa rappresentazione fisica per tabelle di cui
voglio cambiare la presentazoine logica.

voglio dividere la tabella studenti in studenti residenti a firenze e
studenti residenti fuori da firenze

ora la tabella studenti non esiste più, se mi serve un'applicazione
per accedere boh.

attraverso uno schema esterno posso accedere a una stessa roba fisica
e avere un'unica tabella studente, o due tabelle studente-residente e
studente-fuorisede.

**** Indipendenza fisica
posso mantere lo schema logico inalterato e modificare il modo in cui
queste tabelle sono organizzate nel disco
