* Ci sono le videoregistrazioni
Ci sono le videoregistrazioni, ma sono quelle dell'anno scorso

* Recap
 - Dati e infomazioni
 - DBMS e database
   Come questi dati diventano informazioni
   Sempilificare l'accesso ai dati tramite interfaccie standard
   - Persistenza
   - Indicizzazione
   - Utenti diversi con privilegi diversi
   - Tutta sta roba resa possibile tramite modelli di dati
     - Modello relazionale
 - Modello dei dati per semplificare rappresentazione
 - Architettura a tre livelli
   - Architettura che permette anche indipendenza
   - Indipedenxa logica e fisica
     - Fisica
     - Logica
       Consente attraverso uno schema esterno di mantenere invariata
       nel tempo la rappresentazione dei dati, la rappresentazoine
       data all'esterno, anche se io effettuo riorganizzazione dei
       dati a livello logico

* Linguaggi di basi di dati
nel momento in cui ho un linguaggio molto articolato per interagire
con un repository, la ricchezza e complessità del lingaggio possono
causare problemi.
motle cose possono essere fatti ricorrendo a costrutti diversi.

Uno dei vantaggi è stato SQL, Structured Query Language
Linguaggio abbastanza minimale (manco completo) standardizzato per i
database
SQL può essere usato in maniera interattiva in una finestra in cui
interagisci col DBMS.
#+begin_src SQL
  Select Marca, Modello, Costo FROM Televisori WHERE Costo < 800
#+end_src
La semplicità di questo linguaggio e la sintesi abbastanza vicina a
una lingua umana hanno reso questo linguaggio uno standard che non fa
schifo, ed estremamente intuitivo
(ci sono anche construtti più contorti in SQL)
Lo utilizzi all'interno di una finestra collegata al server
Oppure puoi interfacciarti con SQL tramite altri linguaggi che fanno
loro le query tramite SQL.

Utilizzato passo precedentemente come shell \pm ora usato in codice
scritto in linguaggio diverso per essre mandato al database dall'app
python.

Il programma python viene eseguito, contatta il DBMS, esegue
l'istruzoine SQL (crea tabella, estrae dati, puppa)

Presenta comunque un limite quando i dati da trasferire sono
tantissimi e chiedo di fare l'elaborazione non sul client ma sul
server.

* Embedded ad hoc
altrimenti posso immergerlo in un linguaggio più alla ad hoc tipo
=Oracle PL/SQL=, i diversi produttori di DBMS hanno permesso
l'utilizzo di un linguaggio procedurale che permette di usare comandi
SQL insieme a procedure e construtti procedurali

Questo linguaggio può essere eseguito sul server, esegue procedure sul
server, quindi il client ti manda la procedura, sul client verranno
mandato solo i risultati dell'esecuzione, per evitare di mandare
mallopponi enormi di dati tramite la rete ed evitare il collo di
bottiglia degli sporchi babbani I/ O bound.

Ci sono interfaccie grafiche tipo Access, se sei una testa di cazzo
che è troppo debole per scrivere file testo come comanda il vero Dio
Emacs e il suo profeta RMS.

* Personaggi e interpreti
 - *progettisti* e realizzatori del *DBMS* :
   esperti che contribuiscono ad aggiornare le librerie dei DMBS, i
   tizi che fanno i commit in pratica, non impareremo a essere costoro dei
 - *progettisti della base di dati* : amministratori della base di
   dati, DataBase Administrator (DBA), alla fine dei corsi avremo le
   capacità per essere costoro
 - *progettisti* e programmatori di *applicazioni* : alla fine del
   corso, già che (si spera) sappiamo già programmare, dovermmo
   poterlo essere
 - *utenti*
   - utenti *finali*
   - utenti *casuali*[fn::wot rings you got, bitch?]

* Vantaggi e svantaggi[fn::card]
*** Pro
 - evita creare situazioni di inconsistenza dei dati, prolunga la vita
   delle applicazioni che accedono ai dati, grazie all'/indipendenza
   logica/, mantenere la stessa vista sui dati, che si aspetta di
   trovare la tabella in quel modo, grazie all'indipendenza logica
   posso mantenere una vista anche in caso di aggionraggine fisica,
   live patch del database boiii
*** Contro
 - In caso di quantità di dati limitate un DBMS di solito è qualcosa
   di abbastanza corposo, non ha molto senso avere una hash map di
   alberi binari di filesystem ext4, con ridondanza completa RAID,
   versionati da git. E poi dovevi tenere una lista della spesa.
   Visto che di solito i DBMS sono abbastanza integrati, finsci con un
   IDE, e gli IDE sono dei cazzo di giganti.

* Historia magistra datorum
 - small data
 - big data
 - big poppa
 - rhyme droppa
 - game stoppa

* DMBS e modelli logici
 - Modelli logici tradizionali:
   - Gerarchico
   - Reticolare
   - Relazionale
   - A oggetti

Sono subentrati poi altri modelli usato per 
 - Più recenti
   - Object-relational
     Permette di estendere il modello relazione specificando criterii
     di ricerca per i singoli oggetti
   - Schemaless (NoSQL)

** Modello relazoinale
Relazione presa dalla teoria degli insiemi, ma qui è un po' diverso,
visto che stiamo usando /tabelle/

Arriviamo alle tabelle partendo dalla relazione

Una relazione matematica è definita su un insieme di dominii
D_1 ... D_tot dominii anche non distinti
vado poi a considerare il prodotto cartesiano tra questi insiemi
tutte le possibili tot-uple in cui l'iesimo elemento viene da D_i
una n-upla è un gruppo di elementi ordianti (dimensione fissa)

L'ordine di elementi permette di avere elementi duplicati, che non
puoi avere in un insieme non ordiato, in una n-upla un elemento può
essere ripetuto in punti diversi, è tipo un vettore, è un vettore.

 - Una relazione è un sottinsieme del prodotto cartesiano, le D sono
   detti *dominii* della relazione 
 - il tot è detto *grado* della relazione
 - il numero di n-uple è detto *cardinalità* della relazione

(magari vediamola come una funzione r: D \times D \times D \times D \to Booleani?)

Non c'è ordinamento tra n-uple, basta che ci siano, non è definito
quale sia la prima, quale sia la seconda, e quale sia la terza, ma non
possono esserci n-uple ripetute, la relazoine è comunque un inseme

Ma le n-uple sono ordiante, posso fare
 1. Primo elemento \to squadra che gioca in casa
 2. Secondo elemento \to squadra che gioca fuori casa
 3. Terzo elemento \to reti segnate dalla squadra che gioca in casa
 4. Quarto elemento \to reti segnate dalla squadra che gioca fuori casa

l'ordinamento delle colonne permette di usare una relaizione
posizionale per descrivere la funzoine di ogni elemento della colonna
in funzoine alla riga dove si trova.

gli elementi della terza colonna sono il numero di reti segnate dalla
squdra di casa nel contesto della riga dove si trovano

la relazoine posizionale da comunque una certa rigidità perchè non
posso permutare la posizoine delle colonne nella rappresentazione

*** Estensione
A ogni colonna associo un attributo, non è che la terza colonna sono i
punti segnati in casa, è che la colonna che dico tiene i punti in casa
tiene i punti in casa, non devo più modificare il codice per
modificare quale colonna segna cosa, non devo ricompilare dwm, ho un
file config.

*** Tabelle e relazoini
una tabella rappresenta una relazione (nel modello relazionale) se:
 - I valori nella stessa colonna sono tra di loro omogenei, vengono
   dallo stesso dominio
 - Le righe sono diverse da loro, non sono ammesse duplicazioni
 - Le intestazioni delle colonne devono avere nomi diversi
